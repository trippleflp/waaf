package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"github.com/imroc/req/v3"

	"gitlab.informatik.hs-augsburg.de/flomon/waaf/services/api-gateway/graph/model"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.UserRegistrationData) (*model.Token, error) {
	resp, err := req.R().
		SetBody(input).
		SetContentType("application/json").
		Post("http://localhost:8000/register")

	if err != nil {
		return nil, err
	}
	if resp.IsError() {
		return nil, fmt.Errorf("%s", resp.String())
	}
	if resp.IsSuccess() {
		return &model.Token{Token: resp.String()}, nil
	}
	return nil, fmt.Errorf("got unexpected response, raw dump:\n%s", resp.Dump())
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, input model.UserLoginData) (*model.Token, error) {
	resp, err := req.R().
		SetBody(input).
		SetContentType("application/json").
		Post("http://localhost:8000/login")

	if err != nil {
		return nil, err
	}
	if resp.IsError() {
		return nil, fmt.Errorf("%s", resp.String())
	}
	if resp.IsSuccess() {
		return &model.Token{Token: resp.String()}, nil
	}
	return nil, fmt.Errorf("got unexpected response, raw dump:\n%s", resp.Dump())
}
