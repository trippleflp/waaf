// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type FunctionGroup struct {
	Name                  string             `json:"name"`
	ID                    string             `json:"id"`
	UserIds               []*string          `json:"userIds"`
	AllowedFunctionGroups []*FunctionGroupID `json:"allowedFunctionGroups"`
}

type FunctionGroupID struct {
	Name *string `json:"name"`
	ID   *string `json:"id"`
}

type FunctionGroupInput struct {
	Name *string `json:"name"`
	ID   *string `json:"id"`
}

type Token struct {
	Token string `json:"token"`
}

type User struct {
	UserName *string `json:"userName"`
	ID       *string `json:"id"`
}

type UserLoginData struct {
	Username *string `json:"username"`
	Email    *string `json:"email"`
	Password string  `json:"password"`
}

type UserRegistrationData struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type AddUserToFunctionGroupInput struct {
	UserID string   `json:"userId"`
	Role   UserRole `json:"role"`
}

type CreateFunctionGroupInput struct {
	GroupName             string                `json:"groupName"`
	AllowedFunctionGroups []*FunctionGroupInput `json:"allowedFunctionGroups"`
}

type UserRole string

const (
	UserRoleAdmin     UserRole = "ADMIN"
	UserRoleUser      UserRole = "USER"
	UserRoleReader    UserRole = "READER"
	UserRoleDeveloper UserRole = "DEVELOPER"
)

var AllUserRole = []UserRole{
	UserRoleAdmin,
	UserRoleUser,
	UserRoleReader,
	UserRoleDeveloper,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin, UserRoleUser, UserRoleReader, UserRoleDeveloper:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
